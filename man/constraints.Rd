% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constraints.R
\name{constraints}
\alias{constraints}
\title{Conservation problem constraints}
\description{
A constraint can be added to a conservation planning \code{\link{problem}}
to ensure that solutions exhibit a specific characteristic.
}
\details{
Constraints can be used to ensure that solutions exhibit
  a range of different characteristics. For instance, they can be
  used to lock in or lock out certain planning units from the solution, such
  as protected areas or degraded land (respectively).
  Additionally, similar to the \code{\link{penalties}} functions,
  some of the constraint functions can be used to increase connectivity in a
  solution. The key difference between a penalty and a constraint, however,
  is that constraints work by invalidating solutions that do not exhibit
  a specific characteristic, whereas penalty functions work by than
  penalizing solutions which do not meet a specific characteristic. Thus
  constraints do not affect the objective function. The following constraints
  are available.

  The following constraints can be added to a conservation planning
  \code{\link{problem}}:

  \describe{

  \item{\code{\link{add_connected_constraints}}}{Add constraints to a
    conservation problem to ensure that all selected
    planning units are spatially connected to each other.}

  \item{\code{\link{add_corridor_constraints}}}{Adds constraints to ensure
    that features are represented in contiguous reserves.}

  \item{\code{\link{add_locked_in_constraints}}}{Add constraints to ensure
    that certain planning units are selected in the solution.}

  \item{\code{\link{add_locked_out_constraints}}}{Add constraints to ensure
    that certain planning units are not selected in the solution.}

  \item{\code{\link{add_neighbor_constraints}}}{Add constraints to
    ensure that all selected planning units have at least a certain number
    of neighbors.}

 }
}
\examples{
# # not implemented
# # load data
# data(sim_pu_raster, sim_features)
#
# # create base problem with no additional constraints
# p1 <- problem(sim_pu_polygons, sim_features, "cost") \%>\%
#       add_min_set_objective() \%>\%
#       add_relative_targets(0.1) \%>\%
#       add_binary_decisions()
#
# # create problem with locked in constraints
# p2 <- p1 \%>\% add_locked_in_constraints("locked_in")
#
# # create problem with locked in constraints
# p3 <- p1 \%>\% add_locked_out_constraints("locked_out")
#
# # create problem with neighbor constraints
# p4 <- p1 \%>\% add_neighbor_constraints(2)
#
# # create problem with connected constraints
# p5 <- p1 \%>\% add_connected_constraints()
# \donttest{
# # solve problems
# s1 <- solve(p1)
# s2 <- solve(p2)
# s3 <- solve(p3)
# s4 <- solve(p4)
# s5 <- solve(p5)
#
# # plot solutions
# par(mfrow = c(3, 2), mar = c(0, 0, 4.1, 0))
# plot(s1, main = "basic")
# plot(s1[s1$solution_1 == 1, ], col = "darkgreen", add = TRUE)
#
# plot(s2, main="locked in")
# plot(s2[s2$solution_1 == 1, ], col = "darkgreen", add = TRUE)
#
# plot(s3, main="locked out")
# plot(s3[s3$solution_1 == 1, ], col = "darkgreen", add = TRUE)
#
# plot(s4, main = "neighbor")
# plot(s4[s4$solution_1 == 1, ], col = "darkgreen", add = TRUE)
#
# plot(s5, main = "connected")
# plot(s5[s5$solution_1 == 1, ], col = "darkgreen", add = TRUE)
# }

}
\seealso{
\code{\link{decisions}}, \code{\link{objectives}},
 \code{\link{penalties}}, \code{\link{portfolios}}, \code{\link{problem}},
 \code{\link{solvers}}, \code{\link{targets}}.
}
