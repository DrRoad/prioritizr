% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zones.R
\name{zones}
\alias{zones}
\title{Management zones}
\usage{
zones(...)
}
\arguments{
\item{...}{\code{\link[raster]{raster}} or \code{character} objects. See
Details for more information.}
}
\value{
\code{\link{Zones-class}} object.
}
\description{
Data for different biodiversity features in different management zones.
}
\details{
This function is used to store and organize data for creating
\code{\link{ConservationProblem}} objects that have multiple management
zones. In all cases, data for different zones are input as different
arguments. The correct input depends on the type of planning unit data
used when building the conservation \code{\link{problem}}.
\describe{
  \item{\code{\link[raster]{Raster-class}},
    \code{\link[sp]{Spatial-class}}}{\code{\link[raster]{Raster-class}}
    data denoting the amount of each feature present assuming each
    management zone. Data for each zone are specified in seperate
    arguments, and the data for each feature in a given zone are specified
    in separate layers in a \code{\link[raster]{stack}} object. Note that
    all layers for a given zone must have \code{NA} values in exactly the
    same cells.}
  \item{\code{\link{Spatial}}, \code{data.frame}}{\code{character} vector
      with column names that correspond to the abundance or occurrence of
      different features in each planning unit for each zone. Note that
      these columns must not contain any \code{NA} values.}
  \item{\code{\link{Spatial}}, \code{data.frame} or
    \code{matrix}}{\code{data.frame} denoting the amount of each feature
    in each zone. Following conventions used in \emph{Marxan},
    \code{data.frame} objects should be supplied with the columns:
   \describe{
     \item{\code{"pu"}}{\code{integer} planning unit identifier.}
     \item{\code{"species"}}{\code{integer} feature identifier.}
     \item{\code{"amount"}}{\code{numeric} amount of the feature in the
       planning unit for a given zone.}
    }
    Note that data for each zone are specified in a seperate argument, and
    the data contained in a single \code{data.frame} object correspond to
    a single zone. Also, note that data are not required for all
    combinations of planning units, features, and zones. The amounts of
    features in planning units assuming different management zones that are
    missing from the table are treated as zero.}
}
}
\examples{
# load data
data(sim_features_zones)

# create zones using a list of four RasterStack objects
z1 <- zones(sim_features_zones[[1]], sim_features_zones[[2]],
            sim_features_zones[[3]], sim_features_zones[[4]])
print(z1)

# alternatively, coerce the list to a zones object
z2 <- as.Zones(sim_features_zones)
print(z2)

# create zones using character vectors that represent the names of
# columns in a shapefile that contain the amount of each species under
# a different management zone.
z3 <- zones(c("spp1_zone1", "spp2_zone1"),
            c("spp1_zone2", "spp2_zone2"),
            c("spp1_zone3", "spp2_zone3"))
print(z3)

# create zones using data.frame inputs
zone_1_data <- expand.grid(pu = 1:5, species = 1:3)
zone_1_data$amount <- rpois(25, 5)
zone_2_data$amount <- rpois(25, 1)
zone_3_data$amount <- rpois(25, 7)

z4 <- zones(zone_1_data, zone_2_data, zone_3_data)
print(z4)

z5 <- as.Zones(list(zone_1_data, zone_2_data, zone_3_data))
print(z5)
}
\seealso{
\code{\link{problem}}.
}
