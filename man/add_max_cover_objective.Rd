% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_max_cover_objective.R
\name{add_max_cover_objective}
\alias{add_max_cover_objective}
\alias{add_max_cover_objective}
\title{Add Maximum Coverage Objective}
\usage{
add_max_cover_objective(x, budget)
}
\arguments{
\item{x}{\code{\link{ConservationProblem-class}} object.}

\item{budget}{\code{numeric} value specifying the maximum expenditure of
the prioritization.}
}
\description{
Set an objective to find the solution that secures as much of each feature
as possible without exceeding the budget. This type of objective does not
require the addition of targets.
}
\details{
A problem objective is used to specify the overall goal of the
conservation planning problem. Please note that \strong{all conservation
planning problems formulated in the prioritizr package require the addition
of objectives}. Failing to do so will return a default error message
when solving.

The maximum coverage problem seeks to find the set of planning units that
maximizes the overall level of representation across a suite of conservation
features, while keeping cost within a fixed budget. This problem is roughly
the opposite of what the conservation planning software Marxan does.

The maximum coverage problem can be stated mathematically, for \eqn{n}{n}
planning units and \eqn{m}{m} conservation features, as:

\deqn{Max. \space \sum_{i=1}^{m} \sum_{j=1}^{n} x_j r_{ij} \space s.t. \space
\sum_{i=1}^{n}x_i c_i \leq B}{Max. \sum^m \sum^n (xj*rij) s.t. \sum^n
(xi*ci) \le B}

where \eqn{x_i}{xi} is a binary decision variable specifying whether
planning unit \eqn{i}{i} has been selected (1) or not (0), \eqn{c_i}{ci} is #' the cost of planning unit \eqn{i}{i}, \eqn{r_ij}{rij} is the representation
level of feature \eqn{i}{i} in planning unit \eqn{j}{j}, and \eqn{B}{B} is
the budget.
}
\examples{
# load data
data(sim_pu_raster, sim_features)

# create problem
p <- problem(sim_pu_raster, sim_features) \%>\%
     add_max_cover_objective(5000) \%>\%
     add_relative_targets(0.1) \%>\%
     add_binary_decisions()

\donttest{
# solve problem
s <- solve(p)

# plot solution
plot(s, main = "solution")
}


}
\seealso{
\code{\link{objectives}}, \code{\link{constraints}},
  \code{\link{problem}}, \code{\link{targets}}.
}
