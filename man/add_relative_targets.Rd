% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_relative_targets.R
\docType{methods}
\name{add_relative_targets}
\alias{add_relative_targets}
\alias{add_relative_targets-method}
\alias{add_relative_targets,ConservationProblem,numeric-method}
\alias{add_relative_targets,ConservationProblem,matrix-method}
\alias{add_relative_targets,ConservationProblem,character-method}
\alias{add_relative_targets,ConservationProblem,ZonesCharacter-method}
\alias{add_relative_targets}
\alias{add_relative_targets}
\alias{add_relative_targets}
\alias{add_relative_targets}
\alias{add_relative_targets}
\title{Add Relative Targets}
\usage{
\S4method{add_relative_targets}{ConservationProblem,numeric}(x, targets, ...)

\S4method{add_relative_targets}{ConservationProblem,matrix}(x, targets, ...)

\S4method{add_relative_targets}{ConservationProblem,character}(x, targets, ...)

\S4method{add_relative_targets}{ConservationProblem,ZonesCharacter}(x, targets, ...)
}
\value{
\code{\link{ConservationProblem-class}} object with the targets added
  to it.
}
\description{
Set targets as a proportion (between 0 and 1) of the maximum level of
representation of features in the study area. Note
that the \code{\link{add_manual_targets}} function must be used to
specify targets that can be met through allocating planning units
to multiple zones. In other words, this function can be used to specify
targets that each pertain to a single feature and a single zone.
}
\details{
Targets are used to specify the minimum amount or proportion of a feature's
distribution that needs to be protected. Most conservation planning problems
require targets with the exception of the maximum cover
(see \code{\link{add_max_cover_objective}}) and maximum utility
(see \code{\link{add_max_utility_objective}}) problems. Attempting to solve
problems with objectives that require targets without specifying targets
will throw an error.
}
\examples{
# load data
data(sim_pu_raster, sim_features)

# create base problem
p <- problem(sim_pu_raster, sim_features) \%>\%
     add_min_set_objective() \%>\%
     add_binary_decisions()

# create problem with 10 \% targets
p1 <- p \%>\% add_relative_targets(0.1)

# create problem with varying targets for each feature
targets <- c(0.1, 0.2, 0.3, 0.4, 0.5)
p2 <- p \%>\% add_relative_targets(targets)
\donttest{
# solve problem
s <- stack(solve(p1), solve(p2))

# plot solution
plot(s, main = c("10 \% targets", "varying targets"), axes = FALSE,
     box = FALSE)
}

}
\seealso{
\code{\link{targets}}.
}
