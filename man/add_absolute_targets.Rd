% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_absolute_targets.R
\docType{methods}
\name{add_absolute_targets}
\alias{add_absolute_targets}
\alias{add_absolute_targets-method}
\alias{add_absolute_targets,ConservationProblem,numeric-method}
\alias{add_absolute_targets,ConservationProblem,character-method}
\alias{add_absolute_targets}
\alias{add_absolute_targets}
\alias{add_absolute_targets}
\title{Add Absolute Targets}
\usage{
add_absolute_targets(x, targets, ...) # x=ConservationProblem, targets=numeric

add_absolute_targets(x, targets, ...) # x=ConservationProblem, targets=character
}
\arguments{
\item{x}{\code{\link{ConservationProblem-class}} object.}

\item{targets}{\code{numeric} targets for features. If all features should
have the same target, \code{targets} can be a single number. Otherwise,
\code{targets} should be a \code{numeric} \code{vector} specifying a
target for each feature. Alternatively, if the features in
\code{x} were specified using a \code{data.frame} object, then
argument to \code{targets} may refer to a column name.}

\item{...}{not used.}
}
\value{
\code{\link{ConservationProblem-class}} object with the target added
  to it.
}
\description{
Set targets expressed as the actual value of features in the study area 
that need to be represented in the prioritization. The argument to 
\code{x} is treated the same as for \code{\link{add_relative_targets}}.
}
\details{
Note that targets must be added to a \code{\link{problem}} or solving will return an error.


Targets are used to specify the minimum amount or proportion of a feature's
distribution that needs to be protected. All conservation planning problems require 
adding objectives and targets, or solving will return an error.
}
\examples{
# load data
data(sim_pu_raster, sim_features)

# create basic problem
p <- problem(sim_pu_raster, sim_features) \%>\%
  add_min_set_objective()

# create problem with added relative targets
p1 <- p \%>\% add_relative_targets(0.1)

# create problem with added absolute targets
p2 <- p \%>\% add_absolute_targets(3)

# create problem with added log-linear target
p3 <- p \%>\% add_loglinear_targets(10, 0.9, 100, 0.2)

\donttest{
# solve solutions
s <- stack(solve(p1), solve(p2), solve(p3))

# plot solutions
plot(s, main=c("relative targets", "absolute targets",
               "log-linear targets"))
}

}
\seealso{
\code{\link{targets}}, \code{\link{constraints}}, \code{\link{objectives}},
  \code{\link{problem}},  \code{\link{add_relative_targets}}, \code{\link{add_loglinear_targets}}.
}
