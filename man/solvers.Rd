% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solvers.R, R/defaults.R
\name{solvers}
\alias{default_solver}
\alias{gurobi_solver}
\alias{lpsymphony_solver}
\alias{rsymphony_solver}
\alias{solvers}
\title{Problem solvers}
\usage{
gurobi_solver(...)

lpsymphony_solver(...)

rsymphony_solver(...)

default_solver()
}
\arguments{
\item{...}{arguments passed to solver function. The available arguments 
depends on the solver specified. See below for details
on valid arguments.}
}
\description{
These functions are used to specify the method for solving conservation
planning problems.
}
\details{
Each solver uses a function from a different package for solving
         problems. As such the arguments available to customize the 
         process of solving the problem vary depending on the solver
         used. Below is list showing the table with the name of the solver
         and a link to the function used to solve the problem.
         \describe{
         \item{gurobi}{\code{\link[gurobi]{gurobi}}}
         \item{rsymphony_solver}{\code{\link[Rsymphony]{Rsymphony_solve_LP}}}
         \item{lpsymphony_solver}{\code{\link[lpsymphony]{symphony_solve_LP}}}
         }
}
\examples{

# create basic problem and use defaults
p <- problem(cost=sim_pu, features=sim_features) + 
  minimium_set_objective() + 
  relative_targets(0.1)

# add lpsymphony solver with default parameters
p + lpsymphony_solver()

# add lpsymphony solver with custom parameters
p + lpsymphony_solver(gap=0.1, time_limit=100)

\dontrun{
# add gurobi solver
p + gurobi_solver(MIPGap=0.1, Presolve=2, TimeLimit=100)

# add Rsymhpony solver
p + absolute_targets(gap=0.1, time_limit=100)
}
}

