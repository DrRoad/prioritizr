% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics.R, R/add_locked_out_constraint.R
\name{add_locked_out_constraint}
\alias{add_locked_out_constraint}
\title{Add locked out constraints}
\arguments{
\item{x}{\code{\link{ConservationProblem}} object.}

\item{locked_in}{Object that determines which planning units that should be 
locked out. See details for more information.}
}
\value{
\code{\link{ConservationProblem}} object.
}
\description{
Add constraints to ensure that certain planning units are locked out 
from the solution. For example, it may be useful to lock out planning 
units that have been substantially altered by anthropogenic development,
and so contain little remaining habitat.
}
\details{
The locked out planning units can be specified in several 
  different ways:

  \describe{
  
  \item{\code{integer} \code{vector}}{indices for which planning units should
    be locked out.}

  \item{\code{character}}{column name in the attribute table with 
    \code{logical} values indicating if planning units should be locked out. 
    Note that \code{locked_out} can only a \code{character} if the planning
    units in \code{x} are a \code{\link{SpatialPolygonsDataFrame-class}}, 
    \code{\link{SpatialLinesDataFrame-class}}, or 
    \code{\link{SpatialPointsDataFrame-class}} object.}

  \item{\code{\link{Raster-class}} object}{with \code{logical} cells values. 
    Planning units in \code{x} that spatially intersect with at least one 
    \code{TRUE} pixel are locked in.}

  \item{\code{\link{Spatial-class}} object.}{planning units in \code{x} that
    spatially intersect with \code{locked_in} are locked in.}

 }
}
\examples{
# create basic problem
p <- problem(sim_pu_polygons, sim_features) \%>\%
  add_minimum_set_objective() \%>\%
  add_relative_targets(0.2)

# create problem with added locked out constraints using integers
p2 <- p \%>\% add_locked_out_constraint(which(sim_pu_polygons$locked_in))

# create problem with added locked out constraints using a field name
p3 <- p \%>\% add_locked_out_constraint('locked_out')

# create problem with added locked out constraints using raster data
p4 <- p \%>\% add_locked_out_constraint(sim_locked_out_raster)

# create problem with added locked out constraints using spatial polygons 
# data
locked_out <- sim_locked_in_polygons[sim_pu_polygons$locked_out == 1,]
p5 <- p \%>\% add_locked_out_constraint(locked_out)

# solve problems
s <- stack(solve(p), solve(p2), solve(p3), solve(p4), solve(p5))
names(s) <- c('basic solution', 'locked out (integer input)', 
              'locked out (character input)', 'locked out (raster input)', 
              'locked out (polygons input)')

# plot solutions
plot(s)

}
\seealso{
\code{\link{constraints}} for all the available constraints.
}

